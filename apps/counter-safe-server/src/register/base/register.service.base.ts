/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Register as PrismaRegister,
  QrCode as PrismaQrCode,
} from "@prisma/client";

export class RegisterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RegisterCountArgs, "select">): Promise<number> {
    return this.prisma.register.count(args);
  }

  async registers<T extends Prisma.RegisterFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RegisterFindManyArgs>
  ): Promise<PrismaRegister[]> {
    return this.prisma.register.findMany<Prisma.RegisterFindManyArgs>(args);
  }
  async register<T extends Prisma.RegisterFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RegisterFindUniqueArgs>
  ): Promise<PrismaRegister | null> {
    return this.prisma.register.findUnique(args);
  }
  async createRegister<T extends Prisma.RegisterCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RegisterCreateArgs>
  ): Promise<PrismaRegister> {
    return this.prisma.register.create<T>(args);
  }
  async updateRegister<T extends Prisma.RegisterUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RegisterUpdateArgs>
  ): Promise<PrismaRegister> {
    return this.prisma.register.update<T>(args);
  }
  async deleteRegister<T extends Prisma.RegisterDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RegisterDeleteArgs>
  ): Promise<PrismaRegister> {
    return this.prisma.register.delete(args);
  }

  async getQrCode(parentId: string): Promise<PrismaQrCode | null> {
    return this.prisma.register
      .findUnique({
        where: { id: parentId },
      })
      .qrCode();
  }
}
