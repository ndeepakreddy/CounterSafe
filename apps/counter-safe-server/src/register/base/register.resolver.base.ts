/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Register } from "./Register";
import { RegisterCountArgs } from "./RegisterCountArgs";
import { RegisterFindManyArgs } from "./RegisterFindManyArgs";
import { RegisterFindUniqueArgs } from "./RegisterFindUniqueArgs";
import { CreateRegisterArgs } from "./CreateRegisterArgs";
import { UpdateRegisterArgs } from "./UpdateRegisterArgs";
import { DeleteRegisterArgs } from "./DeleteRegisterArgs";
import { QrCode } from "../../qrCode/base/QrCode";
import { RegisterService } from "../register.service";
@graphql.Resolver(() => Register)
export class RegisterResolverBase {
  constructor(protected readonly service: RegisterService) {}

  async _registersMeta(
    @graphql.Args() args: RegisterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Register])
  async registers(
    @graphql.Args() args: RegisterFindManyArgs
  ): Promise<Register[]> {
    return this.service.registers(args);
  }

  @graphql.Query(() => Register, { nullable: true })
  async register(
    @graphql.Args() args: RegisterFindUniqueArgs
  ): Promise<Register | null> {
    const result = await this.service.register(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Register)
  async createRegister(
    @graphql.Args() args: CreateRegisterArgs
  ): Promise<Register> {
    return await this.service.createRegister({
      ...args,
      data: {
        ...args.data,

        qrCode: args.data.qrCode
          ? {
              connect: args.data.qrCode,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Register)
  async updateRegister(
    @graphql.Args() args: UpdateRegisterArgs
  ): Promise<Register | null> {
    try {
      return await this.service.updateRegister({
        ...args,
        data: {
          ...args.data,

          qrCode: args.data.qrCode
            ? {
                connect: args.data.qrCode,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Register)
  async deleteRegister(
    @graphql.Args() args: DeleteRegisterArgs
  ): Promise<Register | null> {
    try {
      return await this.service.deleteRegister(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => QrCode, {
    nullable: true,
    name: "qrCode",
  })
  async getQrCode(@graphql.Parent() parent: Register): Promise<QrCode | null> {
    const result = await this.service.getQrCode(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
