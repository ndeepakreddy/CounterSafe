/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RegisterService } from "../register.service";
import { RegisterCreateInput } from "./RegisterCreateInput";
import { Register } from "./Register";
import { RegisterFindManyArgs } from "./RegisterFindManyArgs";
import { RegisterWhereUniqueInput } from "./RegisterWhereUniqueInput";
import { RegisterUpdateInput } from "./RegisterUpdateInput";

export class RegisterControllerBase {
  constructor(protected readonly service: RegisterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Register })
  async createRegister(
    @common.Body() data: RegisterCreateInput
  ): Promise<Register> {
    return await this.service.createRegister({
      data: {
        ...data,

        qrCode: data.qrCode
          ? {
              connect: data.qrCode,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        qrCode: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Register] })
  @ApiNestedQuery(RegisterFindManyArgs)
  async registers(@common.Req() request: Request): Promise<Register[]> {
    const args = plainToClass(RegisterFindManyArgs, request.query);
    return this.service.registers({
      ...args,
      select: {
        createdAt: true,
        id: true,

        qrCode: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Register })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async register(
    @common.Param() params: RegisterWhereUniqueInput
  ): Promise<Register | null> {
    const result = await this.service.register({
      where: params,
      select: {
        createdAt: true,
        id: true,

        qrCode: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Register })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRegister(
    @common.Param() params: RegisterWhereUniqueInput,
    @common.Body() data: RegisterUpdateInput
  ): Promise<Register | null> {
    try {
      return await this.service.updateRegister({
        where: params,
        data: {
          ...data,

          qrCode: data.qrCode
            ? {
                connect: data.qrCode,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          qrCode: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Register })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRegister(
    @common.Param() params: RegisterWhereUniqueInput
  ): Promise<Register | null> {
    try {
      return await this.service.deleteRegister({
        where: params,
        select: {
          createdAt: true,
          id: true,

          qrCode: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
