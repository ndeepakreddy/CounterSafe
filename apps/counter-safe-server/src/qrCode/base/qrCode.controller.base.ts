/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QrCodeService } from "../qrCode.service";
import { QrCodeCreateInput } from "./QrCodeCreateInput";
import { QrCode } from "./QrCode";
import { QrCodeFindManyArgs } from "./QrCodeFindManyArgs";
import { QrCodeWhereUniqueInput } from "./QrCodeWhereUniqueInput";
import { QrCodeUpdateInput } from "./QrCodeUpdateInput";
import { RegisterFindManyArgs } from "../../register/base/RegisterFindManyArgs";
import { Register } from "../../register/base/Register";
import { RegisterWhereUniqueInput } from "../../register/base/RegisterWhereUniqueInput";
import { ScannedFindManyArgs } from "../../scanned/base/ScannedFindManyArgs";
import { Scanned } from "../../scanned/base/Scanned";
import { ScannedWhereUniqueInput } from "../../scanned/base/ScannedWhereUniqueInput";

export class QrCodeControllerBase {
  constructor(protected readonly service: QrCodeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QrCode })
  async createQrCode(@common.Body() data: QrCodeCreateInput): Promise<QrCode> {
    return await this.service.createQrCode({
      data: {
        ...data,

        product: data.product
          ? {
              connect: data.product,
            }
          : undefined,
      },
      select: {
        code: true,
        createdAt: true,
        id: true,
        isScanned: true,

        product: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QrCode] })
  @ApiNestedQuery(QrCodeFindManyArgs)
  async qrCodes(@common.Req() request: Request): Promise<QrCode[]> {
    const args = plainToClass(QrCodeFindManyArgs, request.query);
    return this.service.qrCodes({
      ...args,
      select: {
        code: true,
        createdAt: true,
        id: true,
        isScanned: true,

        product: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QrCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async qrCode(
    @common.Param() params: QrCodeWhereUniqueInput
  ): Promise<QrCode | null> {
    const result = await this.service.qrCode({
      where: params,
      select: {
        code: true,
        createdAt: true,
        id: true,
        isScanned: true,

        product: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QrCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQrCode(
    @common.Param() params: QrCodeWhereUniqueInput,
    @common.Body() data: QrCodeUpdateInput
  ): Promise<QrCode | null> {
    try {
      return await this.service.updateQrCode({
        where: params,
        data: {
          ...data,

          product: data.product
            ? {
                connect: data.product,
              }
            : undefined,
        },
        select: {
          code: true,
          createdAt: true,
          id: true,
          isScanned: true,

          product: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QrCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQrCode(
    @common.Param() params: QrCodeWhereUniqueInput
  ): Promise<QrCode | null> {
    try {
      return await this.service.deleteQrCode({
        where: params,
        select: {
          code: true,
          createdAt: true,
          id: true,
          isScanned: true,

          product: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/registers")
  @ApiNestedQuery(RegisterFindManyArgs)
  async findRegisters(
    @common.Req() request: Request,
    @common.Param() params: QrCodeWhereUniqueInput
  ): Promise<Register[]> {
    const query = plainToClass(RegisterFindManyArgs, request.query);
    const results = await this.service.findRegisters(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        qrCode: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/registers")
  async connectRegisters(
    @common.Param() params: QrCodeWhereUniqueInput,
    @common.Body() body: RegisterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registers: {
        connect: body,
      },
    };
    await this.service.updateQrCode({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/registers")
  async updateRegisters(
    @common.Param() params: QrCodeWhereUniqueInput,
    @common.Body() body: RegisterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registers: {
        set: body,
      },
    };
    await this.service.updateQrCode({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/registers")
  async disconnectRegisters(
    @common.Param() params: QrCodeWhereUniqueInput,
    @common.Body() body: RegisterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      registers: {
        disconnect: body,
      },
    };
    await this.service.updateQrCode({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/scanneds")
  @ApiNestedQuery(ScannedFindManyArgs)
  async findScanneds(
    @common.Req() request: Request,
    @common.Param() params: QrCodeWhereUniqueInput
  ): Promise<Scanned[]> {
    const query = plainToClass(ScannedFindManyArgs, request.query);
    const results = await this.service.findScanneds(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        location: true,

        qrCode: {
          select: {
            id: true,
          },
        },

        scanDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scanneds")
  async connectScanneds(
    @common.Param() params: QrCodeWhereUniqueInput,
    @common.Body() body: ScannedWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scanneds: {
        connect: body,
      },
    };
    await this.service.updateQrCode({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scanneds")
  async updateScanneds(
    @common.Param() params: QrCodeWhereUniqueInput,
    @common.Body() body: ScannedWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scanneds: {
        set: body,
      },
    };
    await this.service.updateQrCode({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scanneds")
  async disconnectScanneds(
    @common.Param() params: QrCodeWhereUniqueInput,
    @common.Body() body: ScannedWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scanneds: {
        disconnect: body,
      },
    };
    await this.service.updateQrCode({
      where: params,
      data,
      select: { id: true },
    });
  }
}
