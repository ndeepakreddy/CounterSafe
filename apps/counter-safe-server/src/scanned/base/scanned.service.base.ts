/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Scanned as PrismaScanned,
  QrCode as PrismaQrCode,
} from "@prisma/client";

export class ScannedServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ScannedCountArgs, "select">): Promise<number> {
    return this.prisma.scanned.count(args);
  }

  async scanneds<T extends Prisma.ScannedFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScannedFindManyArgs>
  ): Promise<PrismaScanned[]> {
    return this.prisma.scanned.findMany<Prisma.ScannedFindManyArgs>(args);
  }
  async scanned<T extends Prisma.ScannedFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScannedFindUniqueArgs>
  ): Promise<PrismaScanned | null> {
    return this.prisma.scanned.findUnique(args);
  }
  async createScanned<T extends Prisma.ScannedCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScannedCreateArgs>
  ): Promise<PrismaScanned> {
    return this.prisma.scanned.create<T>(args);
  }
  async updateScanned<T extends Prisma.ScannedUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScannedUpdateArgs>
  ): Promise<PrismaScanned> {
    return this.prisma.scanned.update<T>(args);
  }
  async deleteScanned<T extends Prisma.ScannedDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScannedDeleteArgs>
  ): Promise<PrismaScanned> {
    return this.prisma.scanned.delete(args);
  }

  async getQrCode(parentId: string): Promise<PrismaQrCode | null> {
    return this.prisma.scanned
      .findUnique({
        where: { id: parentId },
      })
      .qrCode();
  }
}
