/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScannedService } from "../scanned.service";
import { ScannedCreateInput } from "./ScannedCreateInput";
import { Scanned } from "./Scanned";
import { ScannedFindManyArgs } from "./ScannedFindManyArgs";
import { ScannedWhereUniqueInput } from "./ScannedWhereUniqueInput";
import { ScannedUpdateInput } from "./ScannedUpdateInput";

export class ScannedControllerBase {
  constructor(protected readonly service: ScannedService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Scanned })
  async createScanned(
    @common.Body() data: ScannedCreateInput
  ): Promise<Scanned> {
    return await this.service.createScanned({
      data: {
        ...data,

        qrCode: data.qrCode
          ? {
              connect: data.qrCode,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        location: true,

        qrCode: {
          select: {
            id: true,
          },
        },

        scanDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Scanned] })
  @ApiNestedQuery(ScannedFindManyArgs)
  async scanneds(@common.Req() request: Request): Promise<Scanned[]> {
    const args = plainToClass(ScannedFindManyArgs, request.query);
    return this.service.scanneds({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,

        qrCode: {
          select: {
            id: true,
          },
        },

        scanDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Scanned })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scanned(
    @common.Param() params: ScannedWhereUniqueInput
  ): Promise<Scanned | null> {
    const result = await this.service.scanned({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,

        qrCode: {
          select: {
            id: true,
          },
        },

        scanDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Scanned })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScanned(
    @common.Param() params: ScannedWhereUniqueInput,
    @common.Body() data: ScannedUpdateInput
  ): Promise<Scanned | null> {
    try {
      return await this.service.updateScanned({
        where: params,
        data: {
          ...data,

          qrCode: data.qrCode
            ? {
                connect: data.qrCode,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          location: true,

          qrCode: {
            select: {
              id: true,
            },
          },

          scanDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Scanned })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScanned(
    @common.Param() params: ScannedWhereUniqueInput
  ): Promise<Scanned | null> {
    try {
      return await this.service.deleteScanned({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,

          qrCode: {
            select: {
              id: true,
            },
          },

          scanDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
