/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Scanned } from "./Scanned";
import { ScannedCountArgs } from "./ScannedCountArgs";
import { ScannedFindManyArgs } from "./ScannedFindManyArgs";
import { ScannedFindUniqueArgs } from "./ScannedFindUniqueArgs";
import { CreateScannedArgs } from "./CreateScannedArgs";
import { UpdateScannedArgs } from "./UpdateScannedArgs";
import { DeleteScannedArgs } from "./DeleteScannedArgs";
import { QrCode } from "../../qrCode/base/QrCode";
import { ScannedService } from "../scanned.service";
@graphql.Resolver(() => Scanned)
export class ScannedResolverBase {
  constructor(protected readonly service: ScannedService) {}

  async _scannedsMeta(
    @graphql.Args() args: ScannedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Scanned])
  async scanneds(
    @graphql.Args() args: ScannedFindManyArgs
  ): Promise<Scanned[]> {
    return this.service.scanneds(args);
  }

  @graphql.Query(() => Scanned, { nullable: true })
  async scanned(
    @graphql.Args() args: ScannedFindUniqueArgs
  ): Promise<Scanned | null> {
    const result = await this.service.scanned(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Scanned)
  async createScanned(
    @graphql.Args() args: CreateScannedArgs
  ): Promise<Scanned> {
    return await this.service.createScanned({
      ...args,
      data: {
        ...args.data,

        qrCode: args.data.qrCode
          ? {
              connect: args.data.qrCode,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Scanned)
  async updateScanned(
    @graphql.Args() args: UpdateScannedArgs
  ): Promise<Scanned | null> {
    try {
      return await this.service.updateScanned({
        ...args,
        data: {
          ...args.data,

          qrCode: args.data.qrCode
            ? {
                connect: args.data.qrCode,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Scanned)
  async deleteScanned(
    @graphql.Args() args: DeleteScannedArgs
  ): Promise<Scanned | null> {
    try {
      return await this.service.deleteScanned(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => QrCode, {
    nullable: true,
    name: "qrCode",
  })
  async getQrCode(@graphql.Parent() parent: Scanned): Promise<QrCode | null> {
    const result = await this.service.getQrCode(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
